// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: cacheloader.proto

package cacheloaderservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlShortlinkCacheClient is the client API for UrlShortlinkCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortlinkCacheClient interface {
	GetItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UrlShortlinkCache_GetItemsClient, error)
}

type urlShortlinkCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortlinkCacheClient(cc grpc.ClientConnInterface) UrlShortlinkCacheClient {
	return &urlShortlinkCacheClient{cc}
}

func (c *urlShortlinkCacheClient) GetItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (UrlShortlinkCache_GetItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UrlShortlinkCache_ServiceDesc.Streams[0], "/CacheLoaderService.UrlShortlinkCache/GetItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &urlShortlinkCacheGetItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UrlShortlinkCache_GetItemsClient interface {
	Recv() (*UrlShortLink, error)
	grpc.ClientStream
}

type urlShortlinkCacheGetItemsClient struct {
	grpc.ClientStream
}

func (x *urlShortlinkCacheGetItemsClient) Recv() (*UrlShortLink, error) {
	m := new(UrlShortLink)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UrlShortlinkCacheServer is the server API for UrlShortlinkCache service.
// All implementations must embed UnimplementedUrlShortlinkCacheServer
// for forward compatibility
type UrlShortlinkCacheServer interface {
	GetItems(*Empty, UrlShortlinkCache_GetItemsServer) error
	mustEmbedUnimplementedUrlShortlinkCacheServer()
}

// UnimplementedUrlShortlinkCacheServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortlinkCacheServer struct {
}

func (UnimplementedUrlShortlinkCacheServer) GetItems(*Empty, UrlShortlinkCache_GetItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedUrlShortlinkCacheServer) mustEmbedUnimplementedUrlShortlinkCacheServer() {}

// UnsafeUrlShortlinkCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortlinkCacheServer will
// result in compilation errors.
type UnsafeUrlShortlinkCacheServer interface {
	mustEmbedUnimplementedUrlShortlinkCacheServer()
}

func RegisterUrlShortlinkCacheServer(s grpc.ServiceRegistrar, srv UrlShortlinkCacheServer) {
	s.RegisterService(&UrlShortlinkCache_ServiceDesc, srv)
}

func _UrlShortlinkCache_GetItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UrlShortlinkCacheServer).GetItems(m, &urlShortlinkCacheGetItemsServer{stream})
}

type UrlShortlinkCache_GetItemsServer interface {
	Send(*UrlShortLink) error
	grpc.ServerStream
}

type urlShortlinkCacheGetItemsServer struct {
	grpc.ServerStream
}

func (x *urlShortlinkCacheGetItemsServer) Send(m *UrlShortLink) error {
	return x.ServerStream.SendMsg(m)
}

// UrlShortlinkCache_ServiceDesc is the grpc.ServiceDesc for UrlShortlinkCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortlinkCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CacheLoaderService.UrlShortlinkCache",
	HandlerType: (*UrlShortlinkCacheServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItems",
			Handler:       _UrlShortlinkCache_GetItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cacheloader.proto",
}
